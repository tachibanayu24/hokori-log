{"dev/Obsidian-vaultの一部のディレクトリだけをQuartzで公開する":{"slug":"dev/Obsidian-vaultの一部のディレクトリだけをQuartzで公開する","filePath":"dev/Obsidian vaultの一部のディレクトリだけをQuartzで公開する.md","title":"Obsidian vaultの一部のディレクトリだけをQuartzで公開する","links":[],"tags":["Obsidian"],"content":"何回目かわからないけどブログを作りました。\n試したい技術が現れるたびにブログを作っている気がしますが、今回はちゃんと更新していけるように頑張ります。\nこのブログは、Obsidianのvault（保管庫 ローカルのディレクトリ）の一部のディレクトリをブログ記事として切り出してSSGで記事化し公開する構成になっているので、その説明をします。\nQuartz自体の説明はここではしません。\nこの構成のメリット\npushごとに公開\nObsidianのノートを更新してpushするたびにデプロイjobが実行されるので公開が楽です。\nプライベートなvaultと同一リポジトリ内で独立\n通常、QuartzなどのSSGでブログを作るときは、SSGリポジトリの内部にObsidianのvaultを配置することになると思います。\nその場合、プライベートなvaultとは独立することになりますが、管理が面倒ですし、LLMの恩恵を受けながら記事を書きたい場合は同一のリポジトリで管理して、同じ場所でドキュメントをindex化して活用したいです。\nそういったことができるようになります。\n構成\nリポジトリは2つ登場します。\n\nobsidian-vault\n\nプライベートなObsidian vaultで普通にドキュメント管理として使う\n_published ディレクトリ内のドキュメントのみブログ記事としてビルドして公開したい\n\n\nobsidian-blog\n\nブログのSSGやUIなどを管理する（つまりこのブログの本体）\nソースコードはこちら\n\n\n\nアプローチは、obsidian-vaultの _published ディレクトリ内に変更があったときにGitHub Actionsでeventをdispatchしてobsidian-blog側のGitHub Actionsのトリガーにし、obdsidian-blogではobsidian-vaultをcloneしてきて _published 内のみSSGで記事を生成して公開するというものです。\nローカルでは obsidian-blog の content で obsidian-vault のシンボリックリンクを貼ればローカルでもプレビューできます。\nsequenceDiagram\n    participant OV as obsidian-vault\n    participant GA1 as GitHub Actions\n    participant GB as obsidian-blog\n    participant GA2 as GitHub Actions\n    participant GH as GitHub Pages\n\n    OV-&gt;&gt;GA1: _published/に差分あり\n    GA1-&gt;&gt;GB: vault-updated event\n    GB-&gt;&gt;GA2: triggered\n    GA2-&gt;&gt;OV: クローン\n    GA2-&gt;&gt;GA2: Quartz 4でビルド\n    GA2-&gt;&gt;GH: デプロイ\n\nDeploy用yml\nこれで _published に差分があったときに obsidian-blog のGAが受け取れるeventをdispatchします。\nDISPATCH_TOKEN は、obsidian-blogの contents:read,write 権限を持つ personal access token(PAT)です。\nobsidian-vault/.github/workflows/deploy.ymlname: Trigger Blog Deploy on Published Changes\n \non:\n  push:\n    branches:\n      - main\n    paths:\n      - &#039;_published/**/*.md&#039;\n \njobs:\n  dispatch:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger deployment in obsidian-blog repo\n        uses: peter-evans/repository-dispatch@v3\n        with:\n          token: ${{ secrets.DISPATCH_TOKEN }}\n          repository: tachibanayu24/obsidian-blog\n          event-type: vault-updated\nこれで obsidian-vault から受け取ったeventをトリガーにしてデプロイを実行します。 obsidian-blog でmainブランチにpushしたときにも実行します。\nVAULT_ACCESS_TOKEN は、obsidian-vaultの contents:read 権限を持つ personal access token(PAT)です。\nobsidian-blog/.github/workflows/deploy.ymlname: Deploy Blog\n \non:\n  push:\n    branches:\n      - main\n \n  repository_dispatch:\n    types: [vault-updated] # obsidian-vaultの `_published` が更新されたらdispatchされる\n \npermissions:\n  contents: write\n \njobs:\n  build_and_deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout obsidian-blog Repo\n        uses: actions/checkout@v4\n        with:\n          path: obsidian-blog\n \n      - name: Checkout obsidian-vault Repo (to temp location)\n        uses: actions/checkout@v4\n        with:\n          repository: tachibanayu24/obsidian-vault\n          path: vault-temp\n          token: ${{ secrets.VAULT_ACCESS_TOKEN }}\n \n      - name: Prepare content directory\n        run: mkdir -p obsidian-blog/content\n \n      - name: Copy published content\n        run: |\n          if [ -d &quot;vault-temp/_published&quot; ] &amp;&amp; [ &quot;$(ls -A vault-temp/_published)&quot; ]; then\n            cp -r vault-temp/_published/* obsidian-blog/content/\n          else\n            echo &quot;Warning: vault-temp/_published directory is empty or does not exist.&quot;\n          fi\n \n      # attachmentsは通常 `_published` には配置しないので、画像など正しく表示するためにこれもコピーする\n      - name: Copy attachments to content root\n        run: |\n          if [ -d &quot;vault-temp/_config/attachment&quot; ] &amp;&amp; [ &quot;$(ls -A vault-temp/_config/attachment)&quot; ]; then\n            cp -r vault-temp/_config/attachment/* obsidian-blog/content/\n          else\n            echo &quot;Info: vault-temp/_config/attachment directory is empty or does not exist.&quot;\n          fi\n \n \n      - name: Setup Node, Install, Build\n        working-directory: obsidian-blog\n        env:\n          NODE_ENV: production\n        run: |\n          npm ci\n          npx quartz build\n \n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./obsidian-blog/public\n          cname: blog.tachibanayu24.com\nおわり\nこれで単一vault内でプライベートな領域と公開用の領域で分けることができました。"},"dev/firebase-studio-testplay":{"slug":"dev/firebase-studio-testplay","filePath":"dev/firebase-studio-testplay.md","title":"ブラウザベースのAI統合開発環境 Firebase Studio を触ってみる","links":[],"tags":["Firebase","CodingAgent","LLM"],"content":"2025/4/9、Firebase Studioのプレビュー版がローンチされました。\n早速触ってみたので感想など書いていきます。\nFirebase Studioとは？\nIntroducing Firebase Studio で詳しく紹介されています。\n主な機能\n\n\n自然言語からのプロトタイプ作成\n\nプロンプト、画像、図面からネイティブアプリやWebアプリケーションを構築\nGemini APIキーは対話的に作成して設定できる\n\n\n\nAIチャットによる迅速な反復\n\nGemini in Firebaseとのチャットで、ユーザー認証の追加、レイアウト変更、UI改善などを実現\nコードベースを理解した上で自然言語の指示に基づいて更新\n\n\n\nCodeOSSベースのIDE\n\nコード補完、デバッグ、説明、ターミナルアクセスなどのGeminiコード支援\nFirebaseサービスとの統合\n\n\n\nマルチデバイスプレビュー\n\nWebプレビュー用の公開URL生成\nQRコードによるモバイルデバイスでのプレビュー\n\n\n\nワンクリックデプロイ\n\nFirebase App Hostingを活用した簡単デプロイ\nビルド、CDN、サーバーサイドレンダリングを自動処理\n\n\n\nリアルタイム共同作業\n\nワークスペース全体をURLで共有\n同じ環境内でのリアルタイム共同作業\n\n\n\n利用可能なプラン\n\n無料プラン: 3つのワークスペース\nGoogle Developer Program: 10のワークスペース\nPremium Google Developer Program: 30のワークスペース\n\n一部の統合（Firebase App Hostingなど）には課金アカウントが必要な場合があります。\n触ってみる\nApp Prototyping エージェントを使用してフルスタック ウェブアプリを開発、公開、モニタリングする  |  Firebase Studio にプロンプトが紹介されているので、これのとおりにプロトタイプを構築してみます。\n食品の画像を与えて、それがなんという食品なのかを判定し、レシピを教えてくれるアプリケーションですね。\n\n\n                  \n                  プロンプト \n                  \n                \n\nBuild a web app that can identify food products from an uploaded picture or\nin-browser camera. The app should provide a recipe that contains the\nidentified ingredients. 日本語で構築して\n\n\n完成品は以下のような感じです。\n\nとりあえずこれは一発でできました。\n初回の実行後には、自然言語で反復するのに特化したプロトタイパービューと、実際のコードを参照してデバッグできるコードビューで切り替えることができます。\n\nIDEの方はCodeOSSベースで、プレビューとGeminiとの会話が搭載されています。アンドロイドアプリもエミュレートしてこのようにプレビューできるらしいです。\n感想\n簡単なプロトタイピングはかなり楽ちんにできるので、特定のユースケースを検証するためにノーコードでアプリケーションを構築するとかのニーズは十分満たしそうに見えます。\nただし、Firebase Studioという命名とは裏腹に、FirestoreとかStorageをセットアップして接続して…とかはできないので、その部分は自分でやって上げる必要があるのがちょっと面倒な感じ。それ以外の品質とかは既存のコーディングエージェントと大差ない印象です。\n少し高度なことをやろうとするとエラーも多いです。stack traceとかみて修正を試みてはくれるんですが、そんなに解決しないですね…\n\n良かったところ\n\n3つまで無料\nブラウザベースのIDEがすぐに立ち上がるのでどの環境でも手軽に扱える\nGemini APIキーをボタン一つで作成して利用してくれる\nVueやNextなどテンプレートを選択できるので、簡単に技術スタックをざっくりと指定できる\nAI機能部分はgenkitを用いてワークフローを必ず構築するようになっているっぽい\n\n入出力のzodスキーマとかも\n\n\n\n\n今一つなところ\n\nアウトプットの精度に驚きは特に無い\n\n既存のコーディングエージェントと比べて優れているとは思わない\n\n\nFirestoreなど、Firebaseのサービスの構築もしてくれるとかではない\n\nFirestoreで実行履歴を永続化して、とかの指示をすると、コードはそれっぽくやってくれるが各サービスを有効化したりkeyを自動で入力してくれたりとかはまだない感じ\nhostingで公開するくらい\n\n\n\n\n"},"finance/2025-04-06-米国株の現在地の確認":{"slug":"finance/2025-04-06-米国株の現在地の確認","filePath":"finance/2025-04-06 米国株の現在地の確認.md","title":"2025-04-06 米国株の現在地の確認","links":[],"tags":["株式"],"content":"値動きが激しいので現在の米国株（S&amp;P500）の状況を確認します。\nあんまりこの手の話題で自分の意見を書くのもどうかなと思うので、客観的な事実だけをまとめます。（市場の予想は一切しません）\n最近の主な出来事\nトランプ氏、相互関税を発表　最大50％で日本は24％ - BBCニュース\n\n\n                  \n                  AIによる要約 \n                  \n                \n\nトランプ米大統領が全輸入品への新関税計画を発表。10%基本税に加え、「最悪の違反者」に追加関税。日本には24%が課される。中国やEUにも高関税。「経済的独立宣言」とし、世界経済への影響が懸念されている。\n\n\n中国が報復関税を発表、米株式市場はパンデミック以来の大幅安に - BBCニュース\n\n\n                  \n                  AIによる要約 \n                  \n                \n\n中国が米国の関税に対抗し、全米輸入品へ34%の報復関税を発表。これを受け欧米株価は急落、米主要指数は5%超下落しパンデミック以来最悪の週となった。貿易戦争激化と世界経済への悪影響が懸念される。\n\n\nチャート\nS&amp;P500の直近高値は6147USD、現在の株価は5074USDです。\n2/19の高値から1ヶ月半ほどしか経過していませんが、17.5%ほど下がっています。\n調整局面の目安は10%、弱気相場の目安は20%なので、今は調整局面です。\nちなみにナスダックとラッセル2000はすでに弱気相場入りしています。\n月足では3月に -5.75% と大きく下落しましたが、現時点で4月もすでに -9.58% 下げています。\n\n日足では200日移動平均線で弾かれたあとに、2日連続で出来高を伴って窓を開けて大きく下落しています。\n\n金曜日は広範囲の銘柄が売られたのでヒートマップは真っ赤になっています。\n\n出典: FINANCIAL VISUALIZATIONS\nセンチメント\n恐怖指数(VIX)\nVIXはこの急落を受けて45.3まで急騰しました。\n直近でVIXが40を超えたときのイベントは以下のとおりです。\n\n2024年8月\n\n日経平均株価4451円安　下げ幅ブラックマンデー超え最大 - 日本経済新聞\n\n\n2020年3月〜4月\n\nコロナウイルスの世界的流行\n\n\n\nつまり、一瞬のパニック売があった2024年8月を除けばコロナウイルス流行時以来の水準です。\n\nFear &amp; Greed Index\n現在値は 4 で Extreme Fearです。\n\n出典: CNN Business\nプットコールレシオ\nプットオプションとコールオプションの比で表されるプットコールレシオは現在 1.07です。（IBD）\n1を超えているので、弱気が優勢になってきているということが言えます。\n来週のイベント\n\n4/9\n\nデルタ航空（DAL）決算\n\n\n4/10\n\n米国 消費者物価指数（CPI・コアCPI）\n米国 新規失業保険申請件数\n\n\n4/11\n\n米国 生産者物価指数（PPI）\n米国 ミシガン大学消費者信頼感指数\nJPモルガン（JPM）決算\nウェルズ・ファーゴ（WFC）決算\n\n\n\n再来週（4/14~）は小売売上高、鉱工業生産指数やゴールドマン・サックス、バンク・オブ・アメリカ、ユナイテッドヘルス、ネットフリックスなどの決算があります。\n各国の米国関税に対するリアクションもどんどん出てくるかもしれません。"},"index":{"slug":"index","filePath":"index.md","title":"TOP","links":[],"tags":[],"content":"たちばなゆうとのブログです。\n主にソフトウェア、LLM、スタートアップビジネス、ファイナンスなどの話題の記事を書くつもりです。"},"misc/obsidian-for-llm":{"slug":"misc/obsidian-for-llm","filePath":"misc/obsidian-for-llm.md","title":"LLMとなかよくするためにObsidianを使う","links":["dev/Obsidian-vaultの一部のディレクトリだけをQuartzで公開する"],"tags":["Obsidian","LLM"],"content":"Obsidianは、ローカルのMarkdownファイルを知識ベースとして活用できるノートアプリです。OSSではないですが、コミュニティによるプラグインの開発が活発で色々とカスタマイズできます。\n「ローカルにすべてある」、「拡張可能性が高い」というところがLLMと組み合わせてテキストであれこれするのにとても相性がいいと思い使い始めました。\nまだ使い始めて日が浅いんですが、今のところうまいことワークしており、NotebookLMとかはもはや使わなくなってしまいました。Obsidian x LLM周りのやってることを紹介したいと思います。\n考え方\nObsidianは普通デイリーノートを取ったり日々のアイデアを書き留めてノート同士をリンクし、非線形な知識の構造化みたいなことを目指すのだと思いますが、私は自分だけが参照するために文章を書く習慣があまりないです。\nObsidianにはとにかく情報をぶち込みまくって、LLMの補助を受けながら解釈してアウトプットすることを目的に利用しています。\nなのでグラフビューとか全く使ってないです。（たぶん邪道ではある、が満足してる）\n情報収集: 「後で読む」にぶち込むと同時にAI要約する\nObsidian Web ClipperというChrome拡張で開いているwebページのコンテンツをObsidianにノートとしてぶち込むことができます。\nそのまま使っても割といい感じにメインのコンテンツだけ切り出してmarkdown化してくれていい感じなんですが、Web Clipperには Interpreter 機能があり、これを使うとノートを作成する前にLLMによる処理を挟むことができます。\n例えばこんな感じで記事を要約し、この記事を読んで取るべきNextActionを挙げてくれます。\n\n（青っぽいcallout部分がAIが生成したテキストです）\n後で読もうと思った記事が新規タブに溜まりがちでしたが、とりあえずweb clipperで要約付きのノートを作成しておいて、後でまとめて目を通すようになりました。\n後で読むリストは、優先度と読んだフラグ付きで一覧化され、優先度の降順で表示されるようにしています。\n\nweb clipperの設定\nObsidian Web Clipperから拡張機能をインストールし、拡張機能の settings &gt; Interpreter で任意のモデルを追加してAPIキーを入力します。\nその後、 New template からテンプレートを作成し、Note contentを以下のようにします。\n&gt; [!abstract] Interpreter Note\n&gt; \n&gt; {{&quot;コンテンツを日本語で要約してください。\\n- **共通ルール**\\n  - 読者はベンチャーキャピタリストかつソフトウェア開発者\\n  - 空白行やheading含むすべての行は `&gt; ` で開始して引用であることを示す\\n  - listで句点を利用せず、補足はインデントを付ける\\n- **フォーマット**\\n&gt; ## Summary\\n最大10個のbullet list(`- `)で箇条書きにより要約する。 \\n&gt; ## NextAction\\n最大で3個のcheckbox(`- [ ] ` で出力する。&quot;}}\n\n{{content}}\n\nスニペットは改行できなかったので \\n で改行を表現している感じです。 {{content}} に実際に保存されるコンテンツがmarkdownで入るので、要約以外にも色々やれます。\nリスト化の設定\nDataviewプラグインを使います。プラグインをインストールし、 _index などリストを表示したいページに以下のようにfrontmatter yamlとdataviewで実行したいjsのコードを書きます。\n---\nsearch: \ncssclasses:\n  - table-wide\n  - table-nowrap\n  - table-tiny\n  - row-alt\n---\n\ndataviewに実行させるには、jsの部分は以下のようにcodeblockで入力する必要があります。\n```dataviewjs\nconst MAX = 64000\n \nconst q = dv.current().search || &quot;&quot;\nconst s = dv.current().file.folder\n \nconst d = dv.pages(`&quot;${s}&quot;`).file\n  .filter(x =&gt; x.name.includes(q))\n  .filter(x =&gt; x.name !== &quot;_Index&quot;)\n  .sort(x =&gt; x.mtime, &quot;desc&quot;)\n  .sort(x =&gt; {\n    const priority = x.frontmatter.priority;\n    if (priority === undefined || priority === null) return 1;\n    const numPriority = Number(priority);\n    return isNaN(numPriority) ? 1 : -numPriority;\n  })\n  .sort(x =&gt; x.frontmatter.read ? 1 : 0)\n  .limit(100)\n  .map(x =&gt; {\n  return [\n    x.frontmatter.read ? &#039;✅&#039; : &#039;&#039;, \n    x.frontmatter.priority,\n    x.link, \n    `&lt;progress value=${x.size/MAX}&gt;&lt;/progress&gt;`,\n    x.mday.toLocaleString()\n  ]})\n  dv.table([&quot;read&quot;, &quot;priority&quot;, &quot;&quot;, &quot;size&quot;, &quot;updated&quot;], d)\n`\\`` &lt;- バッククオートはエスケープです。消してください！\nこの例では日付で降順にしたあとproorityでまた降順にし、再度にreadが true になっているものを最後に持っていっています。\njsなので好きに実装可能です。\n情報へのアクセス: CursorとObsidian Copilot\nObsidianのvaultはCursorなどのエディタで開けば単なるmarkdownファイルなので、Q&amp;Aやプランニングなど、様々なことに活用できます。\n例えば筋トレの計画を立てるときは、YouTubeでもブログでもなんでもいいのでweb clipperで参照できる情報をどんどん突っ込んで、LLMといっしょに目標達成の道筋を考えることができます。\n.cursor/rules にディレクトリ構造など明示して育てていくのが良いと思います。\n一応 Obsidian Copilot というプラグインもあり、vaultをindex化してchatしたり、事前に設定した機能（選択範囲の翻訳など）にインスタントにアクセスすることもできます。こんな感じに。\n\nまあCursorで代替できるのであまり使ってないです。\n設定手順は Obsidian Copilotのすゝめ：ノート活動を変えるかもしれない壁打ち相手 - Qiita で詳しく解説されています。\nアウトプット: CursorとObsidianのブログ化\nこのブログはObsidianで書いています。詳しい構築方法は Obsidian vaultの一部のディレクトリだけをQuartzで公開する で紹介しています。\n上記までのプライベートな用途のvaultと同じvault内でブログ記事も管理しており、そうすることでLLMで相互に参照しやすくしています。\n現状は、Cursorで記事の一部を書いてもらったり、記事のレビューをしてもらったりしているくらいですが、将来的には人間はレビューして承認するだけみたいな運用にしても良さそうです。（もちろん、ネットの海にゴミを増やすようなマネはしないようにケアしつつ）\nまとめ\nという感じに、情報のインプットからアウトプットまでをObsidianをハブにして運用しつつ、ほんのりLLMのサポートを受けているという感じです。\nNotion MCPが公式から公開されましたが、このユースケースは代替できないと思います。（APIをガンガン叩かないといけなかったりなど）\nなので移行とかはせずにどっちも使っていきます。"}}