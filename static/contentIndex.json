{"dev/Obsidian-vaultの一部のディレクトリだけをQuartzで公開する":{"slug":"dev/Obsidian-vaultの一部のディレクトリだけをQuartzで公開する","filePath":"dev/Obsidian vaultの一部のディレクトリだけをQuartzで公開する.md","title":"Obsidian vaultの一部のディレクトリだけをQuartzで公開する","links":[],"tags":["Obsidian"],"content":"何回目かわからないけどブログを作りました。\n試したい技術が現れるたびにブログを作っている気がしますが、今回はちゃんと更新していけるように頑張ります。\nこのブログは、Obsidianのvault（保管庫 ローカルのディレクトリ）の一部のディレクトリをブログ記事として切り出してSSGで記事化し公開する構成になっているので、その説明をします。\nQuartz自体の説明はここではしません。\nこの構成のメリット\npushごとに公開\nObsidianのノートを更新してpushするたびにデプロイjobが実行されるので公開が楽です。\nプライベートなvaultと同一リポジトリ内で独立\n通常、QuartzなどのSSGでブログを作るときは、SSGリポジトリの内部にObsidianのvaultを配置することになると思います。\nその場合、プライベートなvaultとは独立することになりますが、管理が面倒ですし、LLMの恩恵を受けながら記事を書きたい場合は同一のリポジトリで管理して、同じ場所でドキュメントをindex化して活用したいです。\nそういったことができるようになります。\n構成\nリポジトリは2つ登場します。\n\nobsidian-vault\n\nプライベートなObsidian vault\n_published ディレクトリ内のドキュメントのみpushするためのリポジトリ\n\n\nobsidian-blog\n\nブログのSSGやUIなどを管理する（つまりこのブログの本体）\nソースコードはこちら\n\n\n\nアプローチは、obsidian-vaultの _published ディレクトリ内に変更があったときにGitHub Actionsでeventをdispatchして、obsidian-blog側のGitHub Actionsではobsidian-vaultをcloseしてきてSSGで記事を生成して公開するというものです。\nちなみに、ローカルでは obsidian-blog の content に obsidian-vault のシンボリックリンクを貼って、obsidian-blogでcontentを .gitignore すればローカルでも問題なくプレビューできます。\nsequenceDiagram\n    participant OV as obsidian-vault\n    participant GA1 as GitHub Actions\n    participant GB as obsidian-blog\n    participant GA2 as GitHub Actions\n    participant GH as GitHub Pages\n\n    OV-&gt;&gt;GA1: _published/に差分あり\n    GA1-&gt;&gt;GB: vault-updated event\n    GB-&gt;&gt;GA2: triggered\n    GA2-&gt;&gt;OV: クローン\n    GA2-&gt;&gt;GA2: Quartz 4でビルド\n    GA2-&gt;&gt;GH: デプロイ\n\nDeploy用yml\nこれで _published に差分があったときに obsidian-blog のGAが受け取れるeventをdispatchします。\nDISPATCH_TOKEN は、obsidian-blogの contents:read,write 権限を持つ personal access token(PAT)です。\nobsidian-vault/.github/workflows/deploy.ymlname: Trigger Blog Deploy on Published Changes\n \non:\n  push:\n    branches:\n      - main\n    paths:\n      - &#039;_published/**/*.md&#039;\n \njobs:\n  dispatch:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Trigger deployment in obsidian-blog repo\n        uses: peter-evans/repository-dispatch@v3\n        with:\n          token: ${{ secrets.DISPATCH_TOKEN }}\n          repository: tachibanayu24/obsidian-blog\n          event-type: vault-updated\nこれで obsidian-vault から受け取ったeventをトリガーにしてデプロイを実行します。 obsidian-blog でmainブランチにpushしたときにも実行します。\nVAULT_ACCESS_TOKEN は、obsidian-vaultの contents:read 権限を持つ personal access token(PAT)です。\nobsidian-blog/.github/workflows/deploy.ymlname: Deploy Blog\n \non:\n  push:\n    branches:\n      - main\n \n  repository_dispatch:\n    types: [vault-updated] # obsidian-vaultの `_published` が更新されたらdispatchされる\n \npermissions:\n  contents: write\n \njobs:\n  build_and_deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout obsidian-blog Repo\n        uses: actions/checkout@v4\n        with:\n          path: obsidian-blog\n \n      - name: Checkout obsidian-vault Repo (to temp location)\n        uses: actions/checkout@v4\n        with:\n          repository: tachibanayu24/obsidian-vault\n          path: vault-temp\n          token: ${{ secrets.VAULT_ACCESS_TOKEN }}\n \n      - name: Prepare content directory\n        run: mkdir -p obsidian-blog/content\n \n      - name: Copy published content\n        run: |\n          if [ -d &quot;vault-temp/_published&quot; ] &amp;&amp; [ &quot;$(ls -A vault-temp/_published)&quot; ]; then\n            cp -r vault-temp/_published/* obsidian-blog/content/\n          else\n            echo &quot;Warning: vault-temp/_published directory is empty or does not exist.&quot;\n          fi\n \n      # attachmentsは通常 `_published` には配置しないので、画像など正しく表示するためにこれもコピーする\n      - name: Copy attachments to content root\n        run: |\n          if [ -d &quot;vault-temp/_config/attachment&quot; ] &amp;&amp; [ &quot;$(ls -A vault-temp/_config/attachment)&quot; ]; then\n            cp -r vault-temp/_config/attachment/* obsidian-blog/content/\n          else\n            echo &quot;Info: vault-temp/_config/attachment directory is empty or does not exist.&quot;\n          fi\n \n \n      - name: Setup Node, Install, Build\n        working-directory: obsidian-blog\n        env:\n          NODE_ENV: production\n        run: |\n          npm ci\n          npx quartz build\n \n      - name: Deploy to GitHub Pages\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./obsidian-blog/public\n          cname: blog.tachibanayu24.com\nおわりに\nこれで単一vault内でプライベートな領域と公開用の領域で分けることができました。"},"index":{"slug":"index","filePath":"index.md","title":"TOP","links":[],"tags":[],"content":"たちばなゆうとのブログです。\n主にソフトウェア、LLM、スタートアップビジネス、ファイナンスなどの話題の記事を書くつもりです。"}}